// Code generated by mockery v2.33.2. DO NOT EDIT.

package apiclientsmocks

import (
	context "context"

	apiclients "github.com/a-novel/go-apis/clients"

	mock "github.com/stretchr/testify/mock"
)

// PermissionsClient is an autogenerated mock type for the PermissionsClient type
type PermissionsClient struct {
	mock.Mock
}

type PermissionsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *PermissionsClient) EXPECT() *PermissionsClient_Expecter {
	return &PermissionsClient_Expecter{mock: &_m.Mock}
}

// HasUserScope provides a mock function with given fields: ctx, query
func (_m *PermissionsClient) HasUserScope(ctx context.Context, query apiclients.HasUserScopeQuery) error {
	ret := _m.Called(ctx, query)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, apiclients.HasUserScopeQuery) error); ok {
		r0 = rf(ctx, query)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PermissionsClient_HasUserScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasUserScope'
type PermissionsClient_HasUserScope_Call struct {
	*mock.Call
}

// HasUserScope is a helper method to define mock.On call
//   - ctx context.Context
//   - query apiclients.HasUserScopeQuery
func (_e *PermissionsClient_Expecter) HasUserScope(ctx interface{}, query interface{}) *PermissionsClient_HasUserScope_Call {
	return &PermissionsClient_HasUserScope_Call{Call: _e.mock.On("HasUserScope", ctx, query)}
}

func (_c *PermissionsClient_HasUserScope_Call) Run(run func(ctx context.Context, query apiclients.HasUserScopeQuery)) *PermissionsClient_HasUserScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apiclients.HasUserScopeQuery))
	})
	return _c
}

func (_c *PermissionsClient_HasUserScope_Call) Return(_a0 error) *PermissionsClient_HasUserScope_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PermissionsClient_HasUserScope_Call) RunAndReturn(run func(context.Context, apiclients.HasUserScopeQuery) error) *PermissionsClient_HasUserScope_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *PermissionsClient) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PermissionsClient_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type PermissionsClient_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *PermissionsClient_Expecter) Ping(ctx interface{}) *PermissionsClient_Ping_Call {
	return &PermissionsClient_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *PermissionsClient_Ping_Call) Run(run func(ctx context.Context)) *PermissionsClient_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *PermissionsClient_Ping_Call) Return(_a0 error) *PermissionsClient_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PermissionsClient_Ping_Call) RunAndReturn(run func(context.Context) error) *PermissionsClient_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// SetUserPermissions provides a mock function with given fields: ctx, form
func (_m *PermissionsClient) SetUserPermissions(ctx context.Context, form apiclients.SetUserPermissionsForm) error {
	ret := _m.Called(ctx, form)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, apiclients.SetUserPermissionsForm) error); ok {
		r0 = rf(ctx, form)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PermissionsClient_SetUserPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserPermissions'
type PermissionsClient_SetUserPermissions_Call struct {
	*mock.Call
}

// SetUserPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - form apiclients.SetUserPermissionsForm
func (_e *PermissionsClient_Expecter) SetUserPermissions(ctx interface{}, form interface{}) *PermissionsClient_SetUserPermissions_Call {
	return &PermissionsClient_SetUserPermissions_Call{Call: _e.mock.On("SetUserPermissions", ctx, form)}
}

func (_c *PermissionsClient_SetUserPermissions_Call) Run(run func(ctx context.Context, form apiclients.SetUserPermissionsForm)) *PermissionsClient_SetUserPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apiclients.SetUserPermissionsForm))
	})
	return _c
}

func (_c *PermissionsClient_SetUserPermissions_Call) Return(_a0 error) *PermissionsClient_SetUserPermissions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PermissionsClient_SetUserPermissions_Call) RunAndReturn(run func(context.Context, apiclients.SetUserPermissionsForm) error) *PermissionsClient_SetUserPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// NewPermissionsClient creates a new instance of PermissionsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPermissionsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *PermissionsClient {
	mock := &PermissionsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
